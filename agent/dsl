本文是关于dsl的结构题规划


每个节点应该包含以下字段作为默认模版，初始有些字段是"" 可能随着智能体运行完成整体的补全


每个节点默认会有以下几个不同级别的信息字段
title：节点的标题名称（很可能是搜索任务名或者总结分析任务名）
summary：节点的摘要内容，初始默认为""
info:节点的详细内容，初始默认为""这部分数据是个xml格式的文本，内部会包含2部分，1是llm的推理内容，包裹在<info type="llm"> xml 标签内，这部分可能为空，读取的时候没找到要在代码做冗余返回空不要报错，2是搜索工具返回的结果，包裹在<info type="search"> xml 标签内，这个可能没有调用搜索引擎就不存在了。

如果当前节点指定p_node 的数据为a:info 则代表他会给父节点a的title、summary、info数据都带过去，如果指定a:summary则代表只带过去title和summary。
还可以通过info后面的[all,search,llm]来指定携带的类型，如果不指定则默认全部携带


字段定义：

node_id:从a开始自增，遵循Excel 列名式编码，从a自增到z，然后aa自增到az
title：节点的标题名称，如果开始节点，就是用户的初始query，如果搜索节点，就是对应的搜索方向，如果是总结节点，就是简短的总结任务描述
summary：节点的概览内容，初始为""后续随着llm输出完善
info：节点详细内容，作为数据提供，以及后续给前端点击节点渲染详细信息用，初始为""后续随着llm输出完善
p_node:父节点的入参 例如（a:info[llm], b:summary,c:info），如果是开始节点，为""，其余按照道理都应该有值
batch：规划节点产生的任务批次，初始节点的批次为1，后续每一次规划节点都会规划0-3个任务（如果判断任务结束，就不再产生新的任务，即产生0个新任务），统一有个批次号来记录管理。如果判断数据已经充分，此时应该会产生最后一个批次，产生唯一的总结智能体，此时batch序号为-1
type：节点类型，初始为start，后续根据规划算法不同而不同，例如start、search、summary、end等
status:节点状态 running、finished、mark_final（被标记为最终节点）

还有一个节点之外的动态字段，考虑到智能体的上下文瓶颈，每一轮规划之后，他都需要动态的更新这个list，比如 a:summary d:summary 是上一轮规划智能体使用的参考信息，新的一轮规划他基于d:summary规划了x,y,z 3个任务，等这3个任务进行完之后，他会更新check_list，
此时他的check_list就会变成 a:summary  x:summary y:summary z:summary 这些信息会作为下一轮规划智能体的输入参数，为了方式智能体的id冲突，此处
check_list ： check_list的更新触发是由规划智能体在每个批次的batch运行完成-开始进行规划的时候记录的，相当于这个字段来指引下一次规划智能体的输入数据是哪些（维护一个动态的需要关注的任务列表）也就是说规划智能体不光要产生下一个批次要运行哪些任务，
 还要给下一个迭代的自己规划自己需要关注哪些agent的输出,还要记录当前最大的node_id，防止node_id重复，比如当前是f，规划了3个智能体，那么新增的智能体id是 g，h，i， 那么输出的最大智能体id变为j


初步开发任务
1.按照我的思路个我展示一个1开始，并行2个搜索，汇总总结的dsl数据存储用例，以保证我们的理解是一致的
2，在完成第一步的方案确认我会给你后续的开发规划